There are four (4) kind of variables in C#

1. Non-Static / Instance Variable
2. Static
3. Constants
4. Read Only

=> Static & Non-Static: 

- if a variable explicitly declared by using the static modifier or else if a variable declared under any static block then those variables are static. other than else are non-static

public class Program 
{
	int x; 		// non-static variable
	static int y; 	// static ariable 

	static void Main() 
	{
	 	int z; 	// static variable
	}
}

- we do not required to initialize the class to use static variables! for a non-static variables we have to initialize the class to use it. 

- Object reference is required for the non-static field, mehtod and property

public class Program 
{
	int x; 		// non-static variable
	static int y; 	// static ariable 

	static void Main() 
	{
	 	int z; 	// static variable
		console.writeline(y); // This is valid line 
		console.writeline(x); // this is in-valid line 
	}
}

- following is the valid way to use the non-static variables

public class Program 
{
	int x = 100; 		// non-static variable
	static int y = 200; 	// static ariable 

	static void Main() 
	{
	 	int z; 		// static variable
		console.writeline(y); // This is valid line 

		// valid way to use the non-static variables in methods 
		Program p1 = New Program(); //p1 is instance variable or object
		Program p2 = New Program(); //p2 is instance variable or object 
		console.writeline(p1.x); // This is valid line  
		console.writeline(p2.x); // THis is new instance and valid line 
	}
}

- Static variable of the class initialized immediately once the execution of class starts where as instance variables are initialized only after creating the class instance as well as each and every time the instance of class created. 

=> Life cycle of the class: 

- the point from where you start the execution of class till ends is called life cycly of the class.

- In a life cycle of a class, a static variable is initialized one and only one time, where as instance variable are initialized 0 times if no instances are created and n times if n instance created. 

- Initialization of instance variables/non-static assiciated with instance creation and Constructor calling, so instance variable can be initialized through constructor.

public class Program 
{
	int x = 100; 		// non-static variable
	static int y = 200; 	// static ariable 
	
	//constructor
	public Program(int x) 
	{
		this.x = x; 	
	}

	static void Main() 
	{
	 	int z; 		// static variable
		console.writeline(y); // This is valid line 

		// valid way to use the non-static variables in methods 
		Program p1 = New Program(50); //p1 is instance variable or object
		Program p2 = New Program(150); //p2 is instance variable or object 
		console.writeline(p1.x); // This is valid line  
		console.writeline(p2.x); // THis is new instance and valid line 
	}
} 

=> Constants

- if a variable is declared using keyword "const" we call it as a constant. We cannot modify these constants once after the declaration. It is mendatory to initilize it during the declaration. 

const float pi = 3.14f;
3.14 is double type so we have to suffix with character "f" to cast it into float type. 

Note: "Literal" meaning Value of the variable. 

public class Program 
{
	int x = 100; 		// non-static variable
	static int y = 200; 	// static variable
	const float pi = 3.14f;	// constant variable

	//constructor
	public Program(int x) 
	{
		this.x = x; 	
	}

	static void Main() 
	{
	 	int z; 		// static variable
		console.writeline(y); // This is valid line 

		// valid way to use the non-static variables in methods 
		Program p1 = New Program(50); //p1 is instance variable or object
		Program p2 = New Program(150); //p2 is instance variable or object 
		console.writeline(p1.x); // This is valid line  
		console.writeline(p2.x); // THis is new instance and valid line 
	}
} 

- behaviour of constant variable will be similiar to the behaviour of static variables. i.e. it is initialized one and only one time in the life cycle of the class and doesn't required instnce of a class. 	

- the obly diffrence is we can modified static variables but we cannot modify constant variables. 

=> ReadOnly Variabels

- variables declared using readonly keyword referred as readonly variables and these variables also cannot be modified like constants but after initialization. It's not a compulsory to initilize variable at the time of declaration. they can also be initilized under the constructor. 

public class Program 
{
	int x = 100; 		// non-static variable
	static int y = 200; 	// static variable
	const float pi = 3.14f;	// constant variable
	readonly bool flag; 	// readonly variable

	//constructor
	public Program(int x, bool flag) 
	{
		this.x = x; 
		this.flag = flag; // initialized in constructor	
	}

	static void Main() 
	{
	 	int z; 		// static variable
		console.writeline(y); // This is valid line 

		// valid way to use the non-static variables in methods 
		Program p1 = New Program(50, true); //p1 is instance variable or object
		Program p2 = New Program(150, false); //p2 is instance variable or object 
		console.writeline(p1.x + " " + p1.falg); // This is valid line  
		console.writeline(p2.x + " " + p2.falg); // THis is new instance and valid line 

	}
} 

- the behaviour of readonly variables will be similiar to the behaviour of non-static variables. that is initialized only after instance of classs and once for each instance of the class created.  

- the only difference instance variables can be modified but not read only variables. 

- we can assign value to read values during the constructor or initilization. 

- constant variable is fixed value of whole class where as read only variables is fixed value for the each instance of the class created. 









