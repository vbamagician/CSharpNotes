// Operator Overloading: 

// Let's first revise what is method overloading? Method overloading is an appraoch to defining multiple behaviours to the method and those behaviours will very based on the paramters of that method. 

String str = "Hello, How are you";
//method with single paramter
str.Substring(14);	Output: "you"
str.Substring(10);	Output:	"are you"
//method with multiple paramter 
str.Substring(10,3);	Output: "are"

// Operator overloading is an approach of defining multiple behaviours to the operators and those behaviours will very based on the operand types between which operator is used for example, + is an addition operator when used between 2 numeric operands and it is an concatenation operator when used between 2 string operands. 

/*
Numeric + Numeric => Addition
String + String => Concatenation
*/

int x = 10;
int y = 20;
int z = x + y;
int m = x - y;
bool b = x > y;

there is an operator method from which this operator's behaviour have been implemented or given intelligence to it. 

following is the method: 

=> Concept:

[<modifiers>] static <return type> operator <operator>(<operand type>)
{
	logic
}

public static int operator +(int a, int b)
public static int operator -(int a, int b)
public static bool operator >(int a, int b)
public static string operator +(string a, string b)
public static bool operator ==(string a, string b)
public static bool operator !=(string a, string b)

<=

=> Example: Code

namespace MyProgram 
{
	class TestOperator 
	{
		static void Main(string[] args) 
    		{
    			string s1 = "Hello";
			string s2 = "World";
    			Console.WriteLine(s1 + s2); //valid statement
			Console.WriteLine(s1 - s2); //invalid statement
			Console.ReadLine();
		}
	}
}

<= End of Code!

=> Example 1: Create Customized Operator Overloading 

namespace MyProgram 
{
	class Matrix : Object
	{
		//2X2 matrix
		int a, b, c, d;
		
		public Matrix(int a, int b, int c, int d)
		{
			this.a = a;
			this.b = b;
			this.c = c;
			this.d = d;
		}

		public override string ToString()
		{
			return "|" + a + " " + b + "|\n" + "|" + c + " " + d + "|\n";
		}
		
		// method for adding two matrixes
		public static Matrix operator +(Matrix obj1, Matrix obj2) 
		{
			Matrix obj = new Matrix(obj1.a + obj2.a, obj1.b + obj2.b, obj1.c + obj2.c, obj1.d + obj2.d);
			return obj;
		}

		// method for substracting two matrixes
		public static  Matrix operator -(Matrix obj1, Matrix obj2)
		{
			Matrix obj = new Matrix(obj1.a - obj2.a, obj1.b - obj2.b, obj1.c - obj2.c, obj1.d - obj2.d);
			return obj;
		}
	}
	
	class TestMatrix
	{
		static void Main()
		{
			Matrix m1 = new Matrix(20, 18, 16, 14);
			Matrix m2 = new Matrix(10, 8, 6, 4);
			Matrix m3 = new Matrix(m1.a + m2.a, m1.b + m2.b, m1.c + m2.c, m1.d + m2.d)//valid statement : create new matrix by adding m1 and m2 matrixes without involving new opeator overloading 
			Matrix m3 = m1 + m2; //invalid statement : as operator + has not been implemented for adding matrixes. If operator overloading has been available then it is valid statement. 
			Matrix m4 = m1 - m2; //invalid statement : as operator - has not been i9mplemented for substracting matrixes. If operator overloading has been available then it is valid statement. 

			Console.WriteLine(m1);
			Console.WriteLine(m1);
			Console.WriteLine(m1);
			Console.WriteLine(m1);

			Console.ReadLine();

		}
	}
}

/* 

Description of Code

Matrix m1 represent as 
|20	18|
|16	14|

Matrix m2 represnet as 
|10	8|
|6	4|

The third adding matrix m3 will be represent as 
|30	26|
|22	18|

the fourth substracting matrix m4 will be represent as 
|10	10|
|10	10|

how customized or operator overloading looks like for the marix claas?

public static Matrix operator +(Matrix obj1, Matrix obj2)
add this method in matrix class not in the class where it is used.

public static Matrix operator -(Matrix obj1, Matrix obj2)
add this method in matrix class no in the class where it is used. 

*/

<= End of Code! 

/*
=> Output of Example 1: 

	it will print you the name of the class because computer does not know who the hell is matrix? We have explictly tell computer to do what and if the computer does know the defination of matrix even if it does not sound good to the machine because it doesn't know yet what will be the configuration of the each matrix. We have not define it clearly. 	

	Console.WriteLine() 19 overloaded methods. so when we pass m1 to the writeline method, compiler doesn't have predefined overloaded method to accept matrix as type so, compiler will consider it as object and hense overloading method Object has been assigned to it. 

	Consolte.WriteLine(Object value);
	internally this method is defined as following 

	public static void WriteLine(Object value) 
	{
		String TypeName = value.ToString();
		WriteLine(TypeName);
	}
    
	internally, WriteLiune method is overridable method of main Object class.

	after implementing or overriding the ToString() method of the object class we will generate following output
	
	Final Output: 

	|20	18|
	|16	14|

	|10	8|
	|6	4|

	|30	26|
	|22	18|

	|10	10|
	|10	10|
	
<= End of ouput 
*/
